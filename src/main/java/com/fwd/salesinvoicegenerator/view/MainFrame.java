/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.fwd.salesinvoicegenerator.view;

import com.fwd.salesinvoicegenerator.controlers.InvoiceDataControler;

import javax.swing.*;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rafikadel
 */
public class MainFrame extends JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        invoiceDataHandler = new InvoiceDataControler(this);
        defaultInvoiceItemTable = (DefaultTableModel) invoiceItemsTable.getModel();
        defaultInvoicesListTable = (DefaultTableModel) invoicesListTable.getModel();
        invoiceDataHandler.loadData();
        clearInvoiceDetails();
        selectedInvoiceNumber = "";
        
        
         invoiceItemsTable.getModel().addTableModelListener(new TableModelListener() {

      public void tableChanged(TableModelEvent e) {

      }
    });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        invoicesTableLable = new javax.swing.JLabel();
        invoiceListScrollPane = new javax.swing.JScrollPane();
        defaultInvoicesListTable= new DefaultTableModel();
        invoicesListTable = new javax.swing.JTable(defaultInvoicesListTable);
        createNewInvoice = new javax.swing.JButton();
        deleteInvoice = new javax.swing.JButton();
        invoiceNumberLabel = new javax.swing.JLabel();
        invoiceNumberValue = new javax.swing.JLabel();
        invoiceTotalLabel = new javax.swing.JLabel();
        invoiceTotalValue = new javax.swing.JLabel();
        invoiceNameLabel = new javax.swing.JLabel();
        invoiceDateLabel = new javax.swing.JLabel();
        invoiceDateTF = new javax.swing.JTextField();
        invoiceNameTF = new javax.swing.JTextField();
        invoiceItemsLabel = new javax.swing.JLabel();
        invoiceItemsScrollPane = new javax.swing.JScrollPane();
        defaultInvoiceItemTable = new DefaultTableModel();
        invoiceItemsTable = new javax.swing.JTable(defaultInvoiceItemTable);
        saveBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        AddItemBtn = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        invoicesTableLable.setText("Invoices Table");

        invoicesListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "No.", "Date", "Customer", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoicesListTable.setColumnSelectionAllowed(true);
        invoicesListTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                invoicesListTableMouseClicked(evt);
            }
        });
        invoiceListScrollPane.setViewportView(invoicesListTable);
        invoicesListTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        createNewInvoice.setText("Create New Invoice");
        createNewInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewInvoiceActionPerformed(evt);
            }
        });

        deleteInvoice.setText("Delete Invoice");
        deleteInvoice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteInvoiceActionPerformed(evt);
            }
        });

        invoiceNumberLabel.setText("Invoice Number");

        invoiceNumberValue.setText("0");

        invoiceTotalLabel.setText("Invoice Total");

        invoiceTotalValue.setText("0.0");

        invoiceNameLabel.setText("Customer Name");

        invoiceDateLabel.setText("Invoice Date");

        invoiceDateTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceDateTFActionPerformed(evt);
            }
        });

        invoiceNameTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invoiceNameTFActionPerformed(evt);
            }
        });

        invoiceItemsLabel.setText("Invoice Items");

        invoiceItemsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "No.", "Item Name", "Item Price", "Item Count", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceItemsTable.setColumnSelectionAllowed(true);
        invoiceItemsTable.getTableHeader().setReorderingAllowed(false);
        invoiceItemsTable.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                invoiceItemsTableInputMethodTextChanged(evt);
            }
        });
        invoiceItemsTable.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                invoiceItemsTablePropertyChange(evt);
            }
        });
        invoiceItemsScrollPane.setViewportView(invoiceItemsTable);
        invoiceItemsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Cancel");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        AddItemBtn.setText("Add Item");
        AddItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddItemBtnActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        loadMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        loadMenuItem.setText("Load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, 0));
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invoicesTableLable, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createNewInvoice)
                        .addGap(49, 49, 49)
                        .addComponent(deleteInvoice, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(invoiceItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invoiceNumberLabel)
                            .addComponent(invoiceNameLabel)
                            .addComponent(invoiceDateLabel)
                            .addComponent(invoiceTotalLabel)
                            .addComponent(invoiceItemsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(AddItemBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(invoiceNameTF)
                                .addComponent(invoiceDateTF, javax.swing.GroupLayout.DEFAULT_SIZE, 324, Short.MAX_VALUE)
                                .addComponent(invoiceTotalValue, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(invoiceNumberValue, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(34, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(saveBtn)
                .addGap(49, 49, 49)
                .addComponent(cancelBtn)
                .addGap(159, 159, 159))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invoiceNumberLabel)
                            .addComponent(invoiceNumberValue))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invoiceDateLabel)
                            .addComponent(invoiceDateTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invoiceNameLabel)
                            .addComponent(invoiceNameTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(invoiceTotalLabel)
                            .addComponent(invoiceTotalValue))
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(invoiceItemsLabel)
                            .addComponent(AddItemBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(invoiceItemsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(invoicesTableLable)
                        .addGap(18, 18, 18)
                        .addComponent(invoiceListScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(createNewInvoice)
                            .addComponent(deleteInvoice))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveBtn)
                    .addComponent(cancelBtn))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        invoiceDataHandler.loadData();
    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        invoiceDataHandler.expoetToCSV();
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void deleteInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteInvoiceActionPerformed
        if (!selectedInvoiceNumber.equals("")) {
            clearInvoiceDetails();
            for (int i = 0; i < invoicesListTable.getRowCount(); i++) {
                if (selectedInvoiceNumber.equals(invoicesListTable.getValueAt(i, 0).toString())) {
                    defaultInvoicesListTable.removeRow(i);
                }

            }
            invoiceDataHandler.removeInvoiceWithNumber(Integer.parseInt(selectedInvoiceNumber));
        }
        

    }//GEN-LAST:event_deleteInvoiceActionPerformed

    private void invoiceDateTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceDateTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invoiceDateTFActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        clearInvoiceDetails();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        
        invoiceDataHandler.saveInvoice();

        
    }//GEN-LAST:event_saveBtnActionPerformed

    private void createNewInvoiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewInvoiceActionPerformed

        clearInvoiceDetails();
    }//GEN-LAST:event_createNewInvoiceActionPerformed

    private void invoicesListTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_invoicesListTableMouseClicked

        getSelectedInvoiceNumber(evt);
        invoiceDataHandler.loadInvoiceDetails(Integer.parseInt(selectedInvoiceNumber));


    }//GEN-LAST:event_invoicesListTableMouseClicked

    private void invoiceNameTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invoiceNameTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_invoiceNameTFActionPerformed

    private void AddItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddItemBtnActionPerformed

        int rowCount = defaultInvoiceItemTable.getRowCount();
        if (rowCount<1) {
            defaultInvoiceItemTable.setRowCount(1);
            invoiceItemsTable.getModel().setValueAt(1, 0, 0);
            
            
        }else{
            
            int lastValue = Integer.parseInt(invoiceItemsTable.getValueAt( rowCount- 1, 0).toString());
        defaultInvoiceItemTable.setRowCount(defaultInvoiceItemTable.getRowCount() + 1);
        invoiceItemsTable.getModel().setValueAt(lastValue + 1, defaultInvoiceItemTable.getRowCount() - 1, 0);
        }
        
        


    }//GEN-LAST:event_AddItemBtnActionPerformed

    private void invoiceItemsTableInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_invoiceItemsTableInputMethodTextChanged
        
    }//GEN-LAST:event_invoiceItemsTableInputMethodTextChanged

    private void invoiceItemsTablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_invoiceItemsTablePropertyChange

        
        
  
        // TODO add your handling code here:
    }//GEN-LAST:event_invoiceItemsTablePropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    public InvoiceDataControler invoiceDataHandler;
    private String selectedInvoiceNumber;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddItemBtn;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JButton createNewInvoice;
    private javax.swing.JButton deleteInvoice;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel invoiceDateLabel;
    private javax.swing.JTextField invoiceDateTF;
    private javax.swing.JLabel invoiceItemsLabel;
    private javax.swing.JScrollPane invoiceItemsScrollPane;
    private javax.swing.JTable invoiceItemsTable;
    public DefaultTableModel defaultInvoiceItemTable;
    private javax.swing.JScrollPane invoiceListScrollPane;
    private javax.swing.JLabel invoiceNameLabel;
    private javax.swing.JTextField invoiceNameTF;
    private javax.swing.JLabel invoiceNumberLabel;
    private javax.swing.JLabel invoiceNumberValue;
    private javax.swing.JLabel invoiceTotalLabel;
    private javax.swing.JLabel invoiceTotalValue;
    private javax.swing.JTable invoicesListTable;
    public DefaultTableModel defaultInvoicesListTable;
    private javax.swing.JLabel invoicesTableLable;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JButton saveBtn;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    public void setInvoicesListTable(JTable invoicesListTable) {
        this.invoicesListTable = invoicesListTable;
    }

    public JTable getInvoicesListTable() {
        return invoicesListTable;
    }

    public JTextField getInvoiceDateTF() {
        return invoiceDateTF;
    }

    public void setInvoiceDateTF(JTextField invoiceDateTF) {
        this.invoiceDateTF = invoiceDateTF;
    }

    public JTable getInvoiceItemsTable() {
        return invoiceItemsTable;
    }

    public void setInvoiceItemsTable(JTable invoiceItemsTable) {
        this.invoiceItemsTable = invoiceItemsTable;
    }

    public JTextField getInvoiceNameTF() {
        return invoiceNameTF;
    }

    public void setInvoiceNameTF(JTextField invoiceNameTF) {
        this.invoiceNameTF = invoiceNameTF;
    }

    public JLabel getInvoiceNumberValue() {
        return invoiceNumberValue;
    }

    public void setInvoiceNumberValue(JLabel invoiceNumberValue) {
        this.invoiceNumberValue = invoiceNumberValue;
    }

    public JLabel getInvoiceTotalValue() {
        return invoiceTotalValue;
    }

    public void setInvoiceTotalValue(JLabel invoiceTotalValue) {
        this.invoiceTotalValue = invoiceTotalValue;
    }

    private void clearInvoiceDetails() {
        invoiceDataHandler.clearInvoiceItemsTableContent();
        invoiceNumberValue.setText(String.valueOf(invoiceDataHandler.getNextInvoiceNumber()));
        invoiceDateTF.setText("");
        invoiceNameTF.setText("");
        invoiceTotalValue.setText("0.0");
    }

    private void getSelectedInvoiceNumber(java.awt.event.MouseEvent evt) {
        JTable source = (JTable) evt.getSource();
        int row = source.rowAtPoint(evt.getPoint());
        this.selectedInvoiceNumber = source.getModel().getValueAt(row, 0) + "";
    }
}
